一、原码，反码，补码的定义
( 1 ) 原码
原码就是[符号位+真值的绝对值], 即用第一位表示符号, 其余位表示值。 比如8位二进制:

[+1]原 = 0000 0001
[-1]原 = 1000 0001

因为第一位是符号位, 所以8位二进制数的取值范围就是:
[1111 1111 , 0111 1111]即 [-127 , 127]

( 2 ) 反码
反码的表示方法是:
a) 正数的反码是其本身
b) 负数的反码是在其原码的基础上, 符号位不变，其余各个位取反。

[+1] = [00000001]原 = [00000001]反
[-1] = [10000001]原 = [11111110]反

可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值。 通常要将其转换成原码再计算。

( 3 ) 补码
补码的表示方法是:
a) 正数的补码就是其本身
b) 负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1。 (即在反码的基础上+1)

[+1] = [00000001]原 = [00000001]反 = [00000001]补
[-1] = [10000001]原 = [11111110]反 = [11111111]补

对于负数, 补码表示方式也是人脑无法直观看出其数值的。 通常也需要转换成原码在计算其数值。

二、为何要使用原码，反码和补码

( 1 ) 原码可被人脑直接识别
现在我们知道了计算机可以有三种编码方式表示一个数。 对于正数因为三种编码方式的结果都相同:
[+1] = [00000001]原 = [00000001]反 = [00000001]补

所以不需要过多解释。 但是对于负数，可见原码, 反码和补码是完全不同的:
[-1] = [10000001]原 = [11111110]反 = [11111111]补

 既然原码才是被人脑直接识别并用于计算表示方式, 为何还会有反码和补码呢?

( 2 ) 反码是为了解决减法而生的。
首先, 因为人脑可以知道第一位是符号位, 在计算的时候我们会根据符号位, 选择对真值区域的加减。
但是对于计算机, 加减乘数已经是最基础的运算, 要设计的尽量简单。
计算机辨别”符号位”显然会让计算机的基础电路设计变得十分复杂!
于是人们想出了将符号位也参与运算的方法。
我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0;
所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了。

于是人们开始探索 将符号位参与运算, 并且只保留加法的方法。 首先来看原码: 计算十进制的表达式: 1-1=0
1 - 1 = 1 + (-1) = [00000001]原 + [10000001]原 = [10000010]原 = -2

如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的。这也就是为何计算机内部不使用原码表示一个数。

为了解决原码做减法的问题, 出现了反码:
1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原= [0000 0001]反 + [1111 1110]反 = [1111 1111]反 = [1000 0000]原 = -0
看着-0是否觉得别扭呢？别急，这就是要引进终极boss补码的缘故。

( 3 ) 计算机采用补码存储数据。补码成功解决了0的符号问题，并且还能够多表示一位最小负数。
如上所述，用反码做减法会存在结果为-0[1000 000原]的情况，虽然人们理解上+0和-0是一样的, 但是0带符号是没有任何意义的。
而且会有[0000 0000]原和[1000 0000]原两个编码表示0。8位2进制数能表示的范围只有[-127, 127]共计 2^8-1=255个，少了一个。

于是补码的出现, 解决了0的符号的问题:
1-1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原

补码的引进，成功排除了结果为-0[1000 000原]的问题，这样我们还可以用[1000 000]来表示-128，
8位二进制能表示的范围也就变为[-128, 127]共计2^8=256个数。完美解决了所有问题。故计算机采用补码来存储数据。


三、原码，反码，补码之间的关系
( 1 ) 正数：
原码 = 反码 = 补码
( 2 ) 负数:
a) 反码 = ~(对应的正数的原码);
b) 补码 = 反码 + 1 = ~(对应的正数的原码) + 1 ；
注：~是按位取反操作

由b)可得如下推论：
对于任意正整数n，则存在 -n = ~n + 1 ；用【n-1】去代入n可得 -n = ~(n-1);故：
-n = ~(n-1) = ~n + 1
